#!/opt/rocks/bin/python

import os
import stat
import sys
import glob
import subprocess
import shutil
import time
import confconst
import confbase

class ConfPostgres(confbase.Baseconfig):
    def __init__(self, argv):
        confbase.Baseconfig.__init__(self, argv)
        self.memunit        = None                          # memory units (kB)
        self.memtotal       = None                          # total memory in Kb
        self.shmall         = None                          # maximum number of shared memory segments
        self.shmmax         = None                          # maximum shared segment size
        self.page_size      = None                          # PAGE_SIZE value
        self.shared_buffers = None                          # PAGE_SIZE value
        self.pgconf         = self.base + confconst.PGCONF  # postgres config file
        self.caconf         = self.base + confconst.CACONF  # postgres client authentication config file
        self.pgtempl        = confconst.PGTEMPL             # postgres config file template
        self.catempl        = confconst.CATEMPL             # postgres client authentication config file template
        self.percentSB      = confconst.PERCENT_SB          # % memory for shared buffers
        self.percentECS     = confconst.PERCENT_ECS         # % memory for effective cashe size
        self.nameinfo = "Update postgres %s or %s configuration file" % (confconst.PGCONF, confconst.CACONF)
        self.descinfo = "pg - use original postgres configuration file %s as a template, create updated entries based\n" % confconst.PGCONF + \
                        "%s     on host's available memory, write new %s.\n" % (self.space, confconst.PGCONF) + \
                        "%sca - use original client authentication file %s, update connections entries to use md5 \n" % (self.space,confconst.CACONF)  + \
                        "%s     authentication, write new %s.\n" % (self.space, confconst.CACONF) + \
                        "%s     Templates are created from original config files that are distributed with postgresql RPMs.\n" % self.space  + \
                        "%s     Previous config files are saved with script's runtime stamp appended.\n" % self.space + \
                        "%s     The script is called during lifemapper-server roll installation.\n" % self.space

        self.parseArgs()
        self.checkArgs()
        self.findTime()
        self.findSysValues()

        self.ip = None
        self.getNetworkInfo()

    def printSynopsis(self):
        print '\nSYNOPSIS\n', self.space + self.usage_command, "pg|ca", "[-h|--help|help]"

    def checkArgs(self):
        if len(self.args) == 0:
            self.help()
	if self.args[0] not in ["pg","ca"]:
            self.help()

    def findSysValues(self):
        self.getMemory()
        self.getSHMALL()
        self.getSHMMAX()
        self.getPageSize()
        self.getSharedBuffers()
        self.getEffectiveCacheSize()

    def getMemory(self):
        """ find total memory """
        cmd = "cat /proc/meminfo | grep MemTotal"
        info, err = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        self.memtotal = int(info.split()[1])
        self.memunit = info.split()[2]

    def getSHMALL(self):
        """ find maximum number of shared memory segments """
        cmd = "/sbin/sysctl kernel.shmall"
        info, err = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        self.shmall = int(info.split()[2])

    def getSHMMAX(self):
        """ find maximum shared segment size  (in pages)"""
        cmd = "/sbin/sysctl kernel.shmmax"
        info, err = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        self.shmmax = int(info.split()[2])

    def getPageSize(self):
        """ find PAGE_SIZE """
        cmd = "/usr/bin/getconf PAGE_SIZE"
        info, err = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        self.page_size = int(info.split()[0])

    def getSharedBuffers(self):
        """ find shared_buffers """
        # shared_buffers value is % of physical memory
        sb = self.memtotal * self.percentSB 

        # the value for 'shmall' should be greater than the value of 'shared_buffers' (in bytes) divided by 'PAGE_SIZE'. 
        if self.shmall > sb/self.page_size :
            self.shared_buffers = int(sb)
        else:
            print "Need to update kernel settings shmmax shmall "

    def getEffectiveCacheSize(self):
        """ find effective_cache_size """
        # effective_cache_size is % of physical memory
        ecs = self.memtotal * self.percentECS 
        self.effective_cache_size = int(ecs)

    def makeConfigFile(self, str):
        """ create new postgresql.conf """
        # origninal config files
        configFiles = {"pg":self.pgconf,"ca":self.caconf}

        # config files templates
        templFiles = {"pg":self.pgtempl,"ca":self.catempl}

        # functions to create new config files content 
        makeConfLines  = {"pg":self.makePGlines,"ca":self.makeCAlines}

        # make a copy of orig file, use original ownership and permissions
        fname = configFiles[str]
        fcopy = fname + self.time
        self.getPerms(fname)
        shutil.copy2(fname, fcopy)
        os.chown(fcopy, self.uid, self.gid)
        print "Original %s is backed up as %s " % (fname, fcopy)

        # read defaults from original file
        self.checkTemplates(configFiles[str], templFiles[str])
        content = self.readFile(templFiles[str])
        defaultLines = self.defaultConfig(str, content)  

        # create new config file, set original ownership and permissions
        newLines = makeConfLines[str]()              
        fnew = fname

        self.writeFile(fnew, defaultLines + newLines)
        shutil.copymode(fname, fnew)
        self.getPerms(fname)
        os.chown(fnew, self.uid, self.gid)

        
    def getCAconfig(self, lines):
        """ read original pg_hba.conf.conf content, return
            non-comment lines, skip lines to be overwritten """
        comments = ["#", " ", "\t", "\n"]
        skip = ["local", "host" ]

    def defaultConfig(self, str, lines):
        """ read original file content, skip lines to be overwritten, return non-comment lines """

        comments = ["#", " ", "\t", "\n"]
        skipCA = ["local", "host" ]
        skipPG = ["listen_addresses", "max_connections", "password_encryption", 
                    "shared_buffers", "effective_cache_size",
                    "enable_seqscan", "logging_collector", "log_directory", "log_filename",
                    "log_truncate_on_rotation", "log_rotation_age", "log_rotation_size"]
        skip = {"pg":skipPG,"ca":skipCA}

        content = ""
        for line in lines:
            if line[0] in comments or line.split()[0] in skip[str]: 
                continue
            else: 
                content += line

        return content

    def makeCAlines(self):
        """ create lines to add to pg_hba.conf file """
        lines  = "# TYPE  DATABASE        USER            ADDRESS                 METHOD\n"
        lines += "# \"local\" is for Unix domain socket connections only\n"
        lines += "local   all             all                                     md5\n"
        lines += "local   all             postgres                                md5\n"
        lines += "# IPv4 local connections: \n"
        lines += "host    all             all             127.0.0.1/32            md5\n" 
        lines += "host    all             all             %s/32            md5\n" % self.ip

        return lines        

    def makePGlines(self):
        """ create lines to add to postgresql.conf file """
        lines = ""
        lines += "listen_addresses = '*'\n"
        lines += "max_connections = 50\n"
        lines += "client_encoding = UTF8\n"
        lines += "password_encryption = on\n"
        lines += "shared_buffers = %d%s\n" % (self.shared_buffers, self.memunit)
        lines += "effective_cache_size = %d%s\n" % (self.effective_cache_size, self.memunit)
        lines += "enable_seqscan = off\n"
        lines += "logging_collector = on\n"
        lines += "log_directory = 'pg_log'\n"
        lines += "log_filename = 'postgresql-%Y-%m-%d_%H%M.log'\n"
        lines += "log_truncate_on_rotation = off\n"
        lines += "log_rotation_age = 1d\n"
        lines += "log_rotation_size = 10MB\n"
#         lines += "unix_socket_directory = '%s'\n" % self.unixSocketDir

        return lines        

    def run(self):
        self.makeConfigFile(self.args[0]) 

### Main ###
app = ConfPostgres(sys.argv)
app.run()

